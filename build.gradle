buildscript {
    ext {
        springBootVersion = "3.3.3"
        httpclientVersion = "4.5.14"
        aerospikeClientVersion = findProperty("aerospikeClientVersion") ?: "7.1.0"
    }
    if (findProperty("aerospikeUseLocal")) {
        print("using Local repo")
        repositories {
            mavenLocal()
        }
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


plugins {
    id("application")
    id('com.palantir.git-version') version "3.0.0"
    id("org.springdoc.openapi-gradle-plugin") version "1.8.0"
}

if (findProperty("aerospikeUseLocal")) {
    print("using Local repo")
    repositories {
        mavenLocal()
    }
}
repositories {
    mavenCentral()
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = "com.aerospike"
sourceCompatibility = 17

def gitVersionDetails = versionDetails()
def gitVersion = gitVersionDetails.lastTag
if (gitVersionDetails.commitDistance != 0) {
    gitVersion = gitVersion + "-" + gitVersionDetails.commitDistance + "-" + gitVersionDetails.gitHash
}
version = gitVersion

bootJar {
    baseName "${jarBaseName}"
}
jar {
    baseName "${jarBaseName}"
}
test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
springBoot {
    buildInfo()
}

openApi {
    customBootRun {
        args.set(["--aerospike.restclient.requireAuthentication=true"])
    }
}

dependencies {
    implementation('org.msgpack:msgpack-core:0.9.8')
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("com.aerospike:aerospike-client:${aerospikeClientVersion}")
    implementation("com.aerospike:aerospike-document-api:2.0.3")
    implementation("org.msgpack:jackson-dataformat-msgpack:0.9.8")
    implementation('org.springframework.retry:spring-retry:2.0.8')
    implementation('org.springframework:spring-aspects:6.1.12')
    implementation('org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:3.1.2')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0')
    implementation("javax.inject:javax.inject:1")
    implementation("com.google.guava:guava:32.1.3-jre")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.apache.httpcomponents:httpclient:${httpclientVersion}")
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('io.github.resilience4j:resilience4j-micrometer:2.2.0')
    implementation('io.micrometer:micrometer-registry-prometheus')
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

compileJava {
    options.compilerArgs << '-parameters'
}