# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    tags: ["*"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  generate-openapi-spec:
    uses: ./.github/workflows/package.yml
  # Build job
  build:
    needs: generate-openapi-spec
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
      - name: Download Package
        uses: actions/download-artifact@v3
        with:
          name: aerospike-rest-gateway-pkg
      - name: Untar package
        run:
          ls -al &&
          mkdir spec &&
          tar -xzf aerospike-rest-gateway*.tgz && rm aerospike-rest-gateway*.tgz &&
          ls -al aerospike-rest-gateway* &&
          cd aerospike-rest-gateway* &&
          cp openapi.json ../spec/
      - name: Generate Swagger UI
        uses: Legion2/swagger-ui-action@v1
        with:
          output: swagger-ui
          spec-file: ./spec/openapi.json
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./swagger-ui
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1